local HttpService = game:GetService("HttpService")

-- Variables you set beforehand:
local key = "YOUR_KEY_HERE"
local merge = "HUNDA" -- must match case exactly

-- Remote URLs
local keyURL = "https://raw.githubusercontent.com/MrInc0gnito/varis/refs/heads/main/scripts/key.hsk"
local mergeURL = "https://raw.githubusercontent.com/MrInc0gnito/varis/refs/heads/main/scripts/requestsignal.hks"

-- Function to fetch plain text from URL
local function fetchText(url)
	local success, result = pcall(function()
		return HttpService:GetAsync(url)
	end)
	if success then
		return result
	else
		warn("Failed to fetch from " .. url .. ": " .. tostring(result))
		return nil
	end
end

-- 1. Validate key
local serverKey = fetchText(keyURL)
if not serverKey then
	error("Could not fetch key from server.")
end

serverKey = serverKey:gsub("%s+", "") -- strip whitespace/newlines
if key ~= serverKey then
	error("Invalid key provided.")
end

print("[Key] Validation successful.")

-- 2. Fetch merge list
local mergeList = fetchText(mergeURL)
if not mergeList then
	error("Could not fetch merge list from server.")
end

-- 3. Parse merge list
local foundURL
for line in string.gmatch(mergeList, "[^\r\n]+") do
	local parts = {}
	for part in string.gmatch(line, "[^|]+") do
		table.insert(parts, part)
	end
	if parts[1] == merge then
		foundURL = parts[2]
		break
	end
end

if not foundURL then
	error("Merge '" .. merge .. "' not found in list.")
end

print("[Merge] Found script URL:", foundURL)

-- 4. Fetch and run script (optional)
local scriptCode = fetchText(foundURL)
if not scriptCode then
	error("Failed to fetch script for merge '" .. merge .. "'.")
end

print("[Merge] Script fetched successfully.")

-- Optional execution in Roblox Studio:
-- loadstring(scriptCode)() -- Uncomment only if you know what the script does
