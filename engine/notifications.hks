local v = {}

local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

local MAX_NOTIFICATIONS = 4
local notificationSpacing = 10 -- px between notifs

local activeNotifications = {}

local function HexToColor3(hex)
    hex = hex:gsub("#","")
    if #hex ~= 6 then return Color3.new(1,1,1) end
    local r = tonumber(hex:sub(1,2),16)/255
    local g = tonumber(hex:sub(3,4),16)/255
    local b = tonumber(hex:sub(5,6),16)/255
    return Color3.new(r,g,b)
end

local function DarkenColor(color, amount)
    amount = math.clamp(amount, 0, 1)
    return Color3.new(color.R * (1 - amount), color.G * (1 - amount), color.B * (1 - amount))
end

local function GetFont(fontName)
    if typeof(fontName) ~= "string" then return Enum.Font.SourceSans end
    local font = Enum.Font[fontName]
    return font or Enum.Font.SourceSans
end

local function repositionNotifications()
    local totalHeight = 0
    -- New: position notifications bottom to top, stacking above previous
    -- We position last notification at bottom, previous ones above it
    for i = #activeNotifications, 1, -1 do
        local notif = activeNotifications[i]
        if notif and notif.Frame and notif.Frame.Parent then
            local pos = UDim2.new(1, -20, 1, -20 - totalHeight)
            notif.TargetPosition = pos
            totalHeight = totalHeight + notif.Frame.AbsoluteSize.Y + notificationSpacing
            local tween = TweenService:Create(notif.Frame, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Position = pos})
            tween:Play()
        else
            table.remove(activeNotifications, i)
        end
    end
end

local function createNotification(params)
    params = params or {}

    local titleText = params.title or "Notification"
    local subtitleText = params.subtitle or ""
    local colHex = params.col or "#2c3e50"
    local duration = tonumber(params.duration) or 5
    local font = GetFont(params.font)

    local bgColor = HexToColor3(colHex)
    local barColor = DarkenColor(bgColor, 0.35)

    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "VarisNotification"
    screenGui.ResetOnSpawn = false
    screenGui.Parent = LocalPlayer:WaitForChild("PlayerGui")

    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0, 320, 0, 100)
    frame.AnchorPoint = Vector2.new(1, 1)
    frame.Position = UDim2.new(1, -20, 1, -20) -- Will be repositioned after
    frame.BackgroundColor3 = bgColor
    frame.BorderSizePixel = 0
    frame.Parent = screenGui
    frame.ClipsDescendants = true
    frame.Name = "NotificationFrame"

    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 12)
    corner.Parent = frame

    local titleLabel = Instance.new("TextLabel")
    titleLabel.Size = UDim2.new(1, -40, 0, 40)
    titleLabel.Position = UDim2.new(0, 20, 0, 10)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = titleText
    titleLabel.Font = font
    titleLabel.TextSize = 18 -- smaller font size
    titleLabel.TextColor3 = Color3.new(1, 1, 1)
    titleLabel.TextXAlignment = Enum.TextXAlignment.Left
    titleLabel.TextYAlignment = Enum.TextYAlignment.Center
    titleLabel.TextWrapped = true
    titleLabel.RichText = true
    titleLabel.AutomaticSize = Enum.AutomaticSize.Y
    titleLabel.Parent = frame

    local subtitleLabel = Instance.new("TextLabel")
    subtitleLabel.Size = UDim2.new(1, -40, 0, 30)
    subtitleLabel.Position = UDim2.new(0, 20, 0, 50)
    subtitleLabel.BackgroundTransparency = 1
    subtitleLabel.Text = subtitleText
    subtitleLabel.Font = font
    subtitleLabel.TextSize = 14 -- smaller font size
    subtitleLabel.TextColor3 = Color3.new(1, 1, 1)
    subtitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    subtitleLabel.TextYAlignment = Enum.TextYAlignment.Top
    subtitleLabel.TextWrapped = true
    subtitleLabel.RichText = true
    subtitleLabel.AutomaticSize = Enum.AutomaticSize.Y
    subtitleLabel.Visible = subtitleText ~= ""
    subtitleLabel.Parent = frame

    local closeBtn = Instance.new("TextButton")
    closeBtn.Size = UDim2.new(0, 30, 0, 30)
    closeBtn.Position = UDim2.new(1, -40, 0, 10)
    closeBtn.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
    closeBtn.Text = "X"
    closeBtn.TextColor3 = Color3.new(1, 1, 1)
    closeBtn.Font = Enum.Font.SourceSansBold
    closeBtn.TextSize = 20
    closeBtn.AutoButtonColor = true
    closeBtn.Parent = frame

    local closeCorner = Instance.new("UICorner")
    closeCorner.CornerRadius = UDim.new(0, 6)
    closeCorner.Parent = closeBtn

    local barHeight = 6
    local progressBarBg = Instance.new("Frame")
    progressBarBg.Size = UDim2.new(1, 0, 0, barHeight)
    progressBarBg.Position = UDim2.new(0, 0, 1, -barHeight)
    progressBarBg.BackgroundColor3 = barColor
    progressBarBg.BorderSizePixel = 0
    progressBarBg.Parent = frame

    local progressBarFill = Instance.new("Frame")
    progressBarFill.Size = UDim2.new(1, 0, 1, 0)
    progressBarFill.Position = UDim2.new(0, 0, 0, 0)
    progressBarFill.BackgroundColor3 = barColor
    progressBarFill.BorderSizePixel = 0
    progressBarFill.Parent = progressBarBg

    -- Tween progress bar shrinking LEFT to RIGHT (width from 1 to 0)
    local tweenInfo = TweenInfo.new(duration, Enum.EasingStyle.Linear)
    local tween = TweenService:Create(progressBarFill, tweenInfo, {Size = UDim2.new(0, 0, 1, 0)})
    tween:Play()

    local function cleanup()
        local tweenOutInfo = TweenInfo.new(0.4, Enum.EasingStyle.Quad, Enum.EasingDirection.In)
        local tweenOut = TweenService:Create(frame, tweenOutInfo, {Position = UDim2.new(1, 400, frame.Position.Y.Scale, frame.Position.Y.Offset)})
        tweenOut:Play()
        tweenOut.Completed:Wait()

        screenGui:Destroy()
        for i, notif in ipairs(activeNotifications) do
            if notif.Frame == frame then
                table.remove(activeNotifications, i)
                break
            end
        end
        repositionNotifications()
    end

    closeBtn.MouseButton1Click:Connect(cleanup)
    delay(duration, cleanup)

    return {
        Frame = frame,
        TargetPosition = frame.Position,
    }
end

local function createRateLimitNotification()
    for _, notif in ipairs(activeNotifications) do
        if notif.isRateLimitWarning then return end
    end

    local rateLimitNotif = createNotification({
        title = "Varis Notifications",
        subtitle = "Your notifications are being ratelimited, do not spam notifications!",
        col = "#e74c3c", -- red
        duration = 5,
        font = "GothamBold",
    })
    rateLimitNotif.isRateLimitWarning = true
    table.insert(activeNotifications, rateLimitNotif)
    repositionNotifications()
end

function v.notify(params)
    if #activeNotifications >= MAX_NOTIFICATIONS then
        createRateLimitNotification()
        return
    end

    local notif = createNotification(params)
    table.insert(activeNotifications, notif)
    repositionNotifications()
end

return v
